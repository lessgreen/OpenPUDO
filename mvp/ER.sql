-- Very, VERY preliminary (autogenerated) template for the backend data structures



/*
 * Address
 * Is the generic representation of a geographic address
 * It can be used as subtype for several objects (Pudo, Person, ...)
 */
CREATE TABLE Address
(
  recordID INT NOT NULL,               -- Mandatory, autoSeq
  intro VARCHAR(80) NOT NULL,          -- Introductory text, like "c/o LESS srl"
  street VARCHAR(80) NOT NULL,
  streetNO VARCHAR(10) NOT NULL,
  notes VARCHAR(80) NOT NULL,          -- Closing text/notes, like "Ring extension 34"
  ZIP VARCHAR(6) NOT NULL,
  city VARCHAR(40) NOT NULL,
  province VARCHAR(3) NOT NULL,
  country CHAR(2) NOT NULL,            -- MUST be an ISO country code
  lon FLOAT NOT NULL,
  lat FLOAT NOT NULL,
  PRIMARY KEY (recordID)
);



/*
 * File
 * It is a placeholder/reference to some externally stored file, typically (but not needingly) an image
 * Each record should be referenced exactly once by one of the references using the uuid as FK
 */
CREATE TABLE externalFile
(
  uuid CHAR(32) NOT NULL,               -- Some kind of universally unique ID, base64 packed.
  storage CHAR(20) NOT NULL,            -- Identifier of the storage subsystem where the file lives (i.e. S3, LocalFS, ...)
  path VARCHAR(64) NOT NULL,            -- Full file path in the storage subsystem
  mimeType VARCHAR(64) NOT NULL,        -- Mime type of the file
  PRIMARY KEY (uuid)
);

/*
 * Network
 * Each PUDO exists because is part of some network (i.e. Poste, InDaBox, Amazon, LESS, ...)
 * This is to allow external networks to be "temporarily imported" as "Pudo to be contacted"
 * XXX-CHECK: Should we support the principle that a given pudo is part of MULTIPLE networks
 */
CREATE TABLE Network
(
  ID CHAR(4) NOT NULL,               -- Arbitrary unique identifier for this network
  description VARCHAR(80) NOT NULL,  -- Description of the network
  PRIMARY KEY (ID)
);


/*
 * Person
 * Each person interacting with the system is represented here, independently of his/her role(s)
 * i.e. Recipients are persons, employess or responsible of a PUDO are persons, even LESS' staff members are persons
 * We should esenntially map here whatever we want to know/keep about each human interacting with the system,
 * in most cases data should be imported by the external authentication system if we acquired the user from there
 * Note that we have several authentication "domains", in example local users authonomously registers in the IT
 * deplyment of OpenPUDO its domain will be @IT, if we acquire an authentication through Facebook it could be
 * @Facebook and so on; then we have an userid which is guaranteed to be unique in the domain. As an example I might be
 * 100005635367259@Facebook
 */

CREATE TABLE Person
(
  recordID INT NOT NULL,
  id@domain VARCHAR(30) NOT NULL,    -- See above
  accessKey VARCHAR(44) NOT NULL,    -- For local users some kind of password hash or SSO token
  firstName VARCHAR(40) NOT NULL,    -- Multiple first names should be collapsed here, i.e. "Martin Luther" [King]
  lastName VARCHAR(40) NOT NULL,     -- Multiple last names should be collapsed here, i.e. 
  email VARCHAR(60) NOT NULL,
  phone VARCHAR(14) NOT NULL,
  SSN VARCHAR(16) NOT NULL,
  fkImage CHAR(32) NOT NULL,
  PRIMARY KEY (recordID),
  FOREIGN KEY (fkImage) REFERENCES externalFile(uuid)
);


/* 
 * Pudo
 * Likely missing a lot of stuff by now
 */
CREATE TABLE Pudo
(
  recordID INT NOT NULL,
  businessName INT NOT NULL,
  status INT NOT NULL,
  VAT VARCHAR(15) NOT NULL,
  contactPhone VARCHAR(13) NOT NULL,
  contactNotes VARCHAR(256) NOT NULL,
  fkNetwork CHAR(4) NOT NULL,
  PRIMARY KEY (recordID),
  FOREIGN KEY (fkNetwork) REFERENCES Network(ID)
);

/*
 * This maps the relation between a person and his address(es).
 * By convention address with seq=0 is the main/home/default one
 * Remind that an address could also belong to a PUDO or something else 
 * and not be referenced here
 */
CREATE TABLE personAddress
(
  seq INT NOT NULL,
  fkPerson INT NOT NULL,
  fkAddress INT NOT NULL,
  PRIMARY KEY (fkPerson, fkAddress),
  FOREIGN KEY (fkPerson) REFERENCES Person(recordID),
  FOREIGN KEY (fkAddress) REFERENCES Address(recordID)
);

/*
 * This maps the relation between a PUDO and his address(es).
 * By convention address with seq=0 is the main/home/default one
 * Remind that an address could also belong to a Person or something else 
 * and not be referenced here
 * Note how also some Pudos might have multiple addresses
 */
CREATE TABLE pudoAddress
(
  seq INT NOT NULL,
  fkAddress INT NOT NULL,
  fkPudo INT NOT NULL,
  PRIMARY KEY (fkAddress, fkPudo),
  FOREIGN KEY (fkAddress) REFERENCES Address(recordID),
  FOREIGN KEY (fkPudo) REFERENCES Pudo(recordID)
);

/*
 * This object represents the Package, a box to be delivered to a Recipient through a PUDO
 * XXX-CHECK: Should we handle multi-item shippings?
 * XXX-CHECK: Should we handle right away shipping information for future integrations (Courier, 
 * Item ID for the Courier, size, class, weight, ... ?
 */
CREATE TABLE Package
(
  recordID INT NOT NULL,
  status INT NOT NULL,           -- Some ENUM-like status, i.e. arrived, notified, lost, picked-up
  deliveredAt INT NOT NULL,      -- References the PUDO where the box has been (should be) delivered
  ownedBy INT NOT NULL,          -- References the Person the package is addressed to
  PRIMARY KEY (recordID),
  FOREIGN KEY (deliveredAt) REFERENCES Pudo(recordID),
  FOREIGN KEY (ownedBy) REFERENCES Person(recordID)
);

/*
 * Event
 * This object represents and event happened to a package
 * Note that events update the status but should be always recorded (i.e. this table is append-only)
 */
CREATE TABLE Events
(
  recordID INT NOT NULL,
  timeStamp timestamp NOT NULL,      -- When did this happen?
  notes VARCHAR(512) NOT NULL,
  fkPackage INT NOT NULL,            -- Link to package
  fkAddress INT NOT NULL,            -- Link to address where this even happened
  fkImage CHAR(32) NOT NULL,         -- Link to (optional) image related to the event (i.e. picture of the box as arrived at the PUDO)
  PRIMARY KEY (recordID),
  FOREIGN KEY (fkPackage) REFERENCES Package(recordID),
  FOREIGN KEY (fkAddress) REFERENCES Address(recordID),
  FOREIGN KEY (fkImage) REFERENCES externalFile(uuid)
);

/*
 * Friendship
 * This maps a friendship relation among two persons
 * As the friendship relation is symmetric there are two methods to handle this table:
 * a) Consider the two "right" and "left" involved persons as intercangeable and force their order (i.e. assert/constrain
 *    that fkPersonLeft<fkPersonRight; then there is no data duplication (one record per pair), direct searches can be done
 *    simply (if (x<y) seek (x,y) else seek (y,x)) BUT listing/iterating friends of a person requires two queries or the query 
 *    on an union view.
 * b) Created two identical records, i.e. "A is fried of B" becomes one record fkPersonRight=A,fkPersonLeft=B and another
 *    as fkPersonRight=B,fkPersonLeft=A; this makes the updates more complex and causes data duplication, but allows easier
 *    and faster searches.
 * Also here we need to keep track of historcal changes, i.e. if one week ago mister A picked up a package addressed to
 * mister B we need to know that at that time they were friends and there was a delegation, so each change writes a new record
 * bumping the "version" field; implicitly all queries should sort by primary key, group by version and keep top.
 * This is append-only
 */
CREATE TABLE Friendship
(
  Type INT NOT NULL,              -- Some kind of enum, i.e. "friend", "closefriend", "ban". Note that a ban is a kind of "friendship"
  timestamp INT NOT NULL,         -- Last time this was updated
  delegations INT NOT NULL,       -- Delegation flags (bitmask?): can pick up my packages, gets notifications, etc,
  version INT NOT NULL,           -- 
  fkPersonLeft INT NOT NULL,
  fkPersonRight INT NOT NULL,
  fkUpdater INT NOT NULL,
  PRIMARY KEY (version, fkPersonLeft, fkPersonRight),
  FOREIGN KEY (fkPersonLeft) REFERENCES Person(recordID),
  FOREIGN KEY (fkPersonRight) REFERENCES Person(recordID),
  FOREIGN KEY (fkUpdater) REFERENCES Person(recordID)
);

/*
 * Validation
 * Here we have the "validation" event, produced by the backoffice, of a PUDO
 * There will be various level of validation, each involving some attached documents
 * As a minimum the validation binds a PUDO with his Owning person, further checks 
 * (ID documents scan, etc) might be required for higher levels of validation
 */
CREATE TABLE Validation
(
  recordID INT NOT NULL,
  notes VARCHAR(512) NOT NULL,
  kfPudo INT NOT NULL,          -- Which PUDO this validation is about
  fkOwner INT NOT NULL,         -- Validated owner
  PRIMARY KEY (recordID),
  FOREIGN KEY (kfPudo) REFERENCES Pudo(recordID),
  FOREIGN KEY (fkOwner) REFERENCES Person(recordID)
);

/*
 * Document
 * This is a (file) document attached to a validation procedure
 * The file might be an image (scanned paper document), an electronic document, a digital signature or else
 */
CREATE TABLE Document
(
  seq INT NOT NULL,
  processed timestamp NOT NULL,
  fkValidation INT NOT NULL,
  uuid CHAR(32) NOT NULL,
  PRIMARY KEY (seq, fkValidation),
  FOREIGN KEY (fkValidation) REFERENCES Validation(recordID),
  FOREIGN KEY (uuid) REFERENCES externalFile(uuid)
);

/*
 * Review
 * This is a review made by a Person on a PUDO
 * The file might be an image (scanned paper document), an electronic document, a digital signature or else
 */
CREATE TABLE Review
(
  recordID INT NOT NULL,
  date DATE NOT NULL,
  stars INT NOT NULL,          -- TripAdvisor-like stars
  text VARCHAR(512) NOT NULL,  -- Review text
  medals INT NOT NULL,         -- Some bitfield attribution of "medals" (i.e. very kind, flezible rules, clean place, ...)
  fkPudo INT NOT NULL,
  fkPerson INT NOT NULL,
  fkPicture CHAR(32) NOT NULL, -- To a reciew an user can attach ONE picture
  PRIMARY KEY (recordID),
  FOREIGN KEY (fkPudo) REFERENCES Pudo(recordID),
  FOREIGN KEY (fkPerson) REFERENCES Person(recordID),
  FOREIGN KEY (fkPicture) REFERENCES externalFile(uuid)
);

/*
 * Role
 * A role is a relationship between a Person and a Pudo
 * It can be:
 * - The authorization for this Person to use the Pudo for his packages (i.e. roleType = Addressee)
 * - A BAN from this Person to see/request the Pudo (roleType = Ban)
 * - The ownership of the PUDO by this Person, meaning that this person is the owner of the business (i.e. roleType = Owner)
 * - A delegation for this Person to dome something in plkace of the owner (roleType = Delegation, where roleFlags will 
 *   specify what the delegated Person is allowed to do as a bitMask: receivePackages, deliverPackages, allowUsers, banUsers, ...)
 * - There is no relation (because previous relations have beed deleted, see below)
 * Note that each delegation is by definition hierarchic, so if Person X is withdrawn the ability to do roleFlag Z this should be
 * reset in all other records referencing this one as (grantedBy, grantedOn, grantedAs); firthermore also this table is
 * versioned: records are never changed or deleted (append only), changes cause the record to be copied and the version field
 * bumped up, access should always sort by primary key, group by fkPerson, fkPudo and top on version.
 */
CREATE TABLE Role
(
  roleType INT NOT NULL,
  roleFlags INT NOT NULL,
  version INT NOT NULL,
  timeStamp timestamp NOT NULL,
  fkPerson INT NOT NULL,
  fkPudo INT NOT NULL,
  grantedBy INT NOT NULL,
  grantedOn INT NOT NULL,
  grantedAs INT NOT NULL,
  PRIMARY KEY (version, fkPerson, fkPudo),
  FOREIGN KEY (fkPerson) REFERENCES Person(recordID),
  FOREIGN KEY (fkPudo) REFERENCES Pudo(recordID),
  FOREIGN KEY (grantedBy, grantedOn, grantedAs) REFERENCES Role(fkPerson, fkPudo, version)
);
